[["index.html", "PSC 253 Minimal Manual Preface", " PSC 253 Minimal Manual Matthew B. Platt 2020-11-03 Preface This book is a supplement to the book, Quantitative Social Science: An Introduction, by Kosuke Imai. It also relies heavily on the work of Jeffrey Arnold, who translated the Imai code into tidyverse code. I aspire for this text to act as a minimal manual for the course PSC 253 Scope and Methods in Political Science taught at Morehouse College. It is intended to cover all of the main analytical tasks that the course requires. "],["basic.html", "Chapter 1 R Basics", " Chapter 1 R Basics At is most basic functionality, R is a calculator. "],["calculate.html", "1.1 Use R as a Calculator", " 1.1 Use R as a Calculator 1.1.1 Problem You want to add, subtract, multiply, divide, use exponents, and take square roots 1.1.2 Solution Use + for addition, - for subtraction, * for multiplication and / for division. # addition 43 + 5 ## [1] 48 # subtraction 43 - 5 ## [1] 38 # multiplication 43 * 5 ## [1] 215 # division 43/5 ## [1] 8.6 For exponents, we raise X to the power of y by using ^. That is X^y. # raise 43 to the power of 5 43 ^ 5 ## [1] 147008443 Take the square root of some number x by using the function sqrt(). That is sqrt(x). # take the square root of 43 sqrt(43) ## [1] 6.557439 1.1.3 Troubleshooting Keep in mind that R follows the order of operations, 2 + 2 * 2 is equal to 6 and not 8. # correct 2 + 2 * 2 ## [1] 6 # incorrect (2 + 2) * 2 ## [1] 8 "],["object.html", "1.2 Creating an Object", " 1.2 Creating an Object 1.2.1 Problem You want to create an object to hold a number 1.2.2 Solution To create an object: type in a name for the object, like newobject then use the assignment operator &lt;-, input a number, mathematical expression, dataset, or text on the right side of &lt;- that you want assigned to the newobject # assigning the number 4 to a new object named &quot;myobject&quot; myobject &lt;- 4 # assigning the text &quot;hallelujah hollaback&quot; to a new object named &quot;second_object&quot; second_object &lt;- &quot;hallelujah hollaback&quot; Type the name of an object in order to see what it contains. myobject ## [1] 4 second_object ## [1] &quot;hallelujah hollaback&quot; 1.2.3 Troubleshooting There cannot be any spaces in the name of an object. Instead you could use dots, dashes, underscores, or capitalization to distinguish between words: small.data, big-data, bigger_data, mediumData. Text needs to be in quotation marks in order to be assigned to an object. Object names are case sensitive Myobject is not the same as myobject "],["vector.html", "1.3 Creating a Vector", " 1.3 Creating a Vector A vector is a list of numbers or characters. We will create vectors for a variety of reasons in this course. 1.3.1 Problem You want to create a vector. 1.3.2 Solution Use the function c() to create a list by separating the entries with a comma. # create a vector called &#39;prime&#39; prime &lt;- c(1, 3, 5, 7) prime ## [1] 1 3 5 7 # create a vector called &quot;first_name&quot; first_name &lt;- c(&quot;Matthew&quot;, &quot;Mosi&quot;, &quot;Manu&quot;, &quot;Ekundayo&quot;, &quot;Kwasi&quot;) first_name ## [1] &quot;Matthew&quot; &quot;Mosi&quot; &quot;Manu&quot; &quot;Ekundayo&quot; &quot;Kwasi&quot; 1.3.3 Troubleshooting As the name of a function, c() is case sensitive. Use the lowercase c. Make sure that all elements are separated by a comma. Vectors are typically assigned to some object. "],["indexing.html", "1.4 Indexing", " 1.4 Indexing We can use indexing to pull out specific sets of observations from a vector or dataset. 1.4.1 Problem You want to select a specific one observation based on its position within a vector or matrix. 1.4.2 Solution We index by using the brackets [x, y] after an object where x is the row and y is the column. # we have a vector prime &lt;- c(1, 3, 5, 7) # we want the number 3, which is the second observation in the vector prime[2] ## [1] 3 # we have a matrix yup &lt;- matrix(c(prime,2, 6, 10, 14), nrow = 2, ncol = 4, byrow = T) yup ## [,1] [,2] [,3] [,4] ## [1,] 1 3 5 7 ## [2,] 2 6 10 14 # We want the observation in the first row and fourth column yup[1, 4] ## [1] 7 1.4.3 Problem You want to select an entire row or column. 1.4.4 Solution You can select an entire row by leaving the column index position blank yup[2, ]. You can select an entire column by leaving the row index position blank yup[ , 2]. # We have our matrix yup ## [,1] [,2] [,3] [,4] ## [1,] 1 3 5 7 ## [2,] 2 6 10 14 # We want the second row yup[1, ] ## [1] 1 3 5 7 # We want the third column yup[ , 3] ## [1] 5 10 "],["bivariate-comparisons.html", "Chapter 2 Bivariate Comparisons ", " Chapter 2 Bivariate Comparisons "],["crosstab.html", "2.1 Crosstab", " 2.1 Crosstab 2.1.1 Problem You want to make a crosstab. 2.1.2 Solution Load the poliscidata package. In order to create a crosstab in R, we use the function called xtp(). The function follows the following template: xtp(data = your data, y = dependent variable, x = independent variable, w = weights) Specify the dataset, the dependent variable, the independent variable, and the weights (if applicable) # Create a crosstab where the dependent variable is &quot;envjob_3&quot;, the independent variable is &quot;pid_3&quot;, and the weights are &quot;wt&quot;. # The dataset is &quot;nes&quot;, which is found in the &quot;poliscidata&quot; package. xtp(data = nes, y = envjob_3, x = pid_3, w = wt) ## Cell Contents ## |-------------------------| ## | Count | ## | Column Percent | ## |-------------------------| ## ## ============================================ ## pid_3 ## envjob_3 Dem Ind Rep Total ## -------------------------------------------- ## Envir 1005 721 212 1938 ## 59.82% 38.25% 15.30% ## -------------------------------------------- ## Mid 508 749 525 1782 ## 30.24% 39.73% 37.88% ## -------------------------------------------- ## Jobs 167 415 649 1231 ## 9.94% 22.02% 46.83% ## -------------------------------------------- ## Total 1680 1885 1386 4951 ## 33.93% 38.07% 27.99% ## ============================================ 2.1.3 Troubleshooting Make sure that the poliscidata package is loaded. Use library(poliscidata) to load. The arguments for the independent and dependent variables are just the variable names. They do not follow the template of data$variable. Crosstabs are used when both the independent and dependent variables are categorical. Avoid making a crosstab with numeric data. "],["compmeans.html", "2.2 Comparison of Means", " 2.2 Comparison of Means 2.2.1 Problem You want to make a comparison of means table. 2.2.2 Solution Load the poliscidata package. In order to create a comparison of means table in R, we use the function called compmeans(). The function follows the following template: compmeans(x = data$dependent, f = data$independent) Here is a comparison of means table for feelings towards Obama obama_therm by party identification pid_x. # create the comparison of means table compmeans(x = nes$obama_therm, f = nes$pid_x, weights = nes$wt) ## Warning in descr::compmeans(...): 442 rows with missing values dropped ## Mean value of &quot;nes$obama_therm&quot; according to &quot;nes$pid_x&quot; ## Mean N Std. Dev. ## StrDem 91.12934 1384 14.19526 ## WkDem 75.39237 813 22.08436 ## IndDem 76.11223 695 20.22679 ## Ind 54.56354 724 29.85396 ## IndRep 32.15929 565 27.71165 ## WkRep 36.67241 580 27.85999 ## StrRep 18.44039 713 22.65842 ## Total 60.72470 5474 34.64432 2.2.3 Troubleshooting Make sure poliscidata is loaded. Keep in mind that the variables follow the pattern of data$variable. You only need to specify the weights argument if you have survey data with survey weights. "],["barchart.html", "2.3 Make a Bar Chart", " 2.3 Make a Bar Chart 2.3.1 Problem Make a barchart that plots the mean of a dependent variable (Y) by an independent variable (X). 2.3.2 Solution Create a summary dataset to plot (see 3.4). Use ggplot() for the data and the mapping. The data is the summary dataset, data = sum_data The mapping is mapping = aes(x = independent, y = dependent) If you want to color the bars, add fill = independent to the mapping. Use a + at the end of the line of code. Use geom_col() to make the bar shapes. p1 &lt;- ggplot(data = sum_data, mapping = aes(x = independent, y = dependent)) + geom_col() Plot the mean feelings towards Obama obama_therm by party identification pid_x. # create the summary dataset partymeans &lt;- nes %&gt;% group_by(pid_x) %&gt;% summarise(average = wtd.mean(obama_therm, na.rm = T, weights = wt)) ## `summarise()` ungrouping output (override with `.groups` argument) # specify the data and mapping p1 &lt;- ggplot(data = partymeans, mapping = aes(x = pid_x, y = average)) + # add the bar shape geom_col() # print the plot p1 2.3.3 Troubleshooting Make sure that you use the summary dataset instead of the larger dataset. If there are errors in making the summary dataset, then there will be problems in the plot. You need to load the tidyverse package. "],["data-wrangling.html", "Chapter 3 Data Wrangling ", " Chapter 3 Data Wrangling "],["factor.html", "3.1 Create a Factor Variable", " 3.1 Create a Factor Variable 3.1.1 Problem You want to transform a variable into a factor. 3.1.2 Solution Decide on what to name the factor variable. Use as.factor() to assign the old variable values to the new variable. Use levels() to assign labels to the values of the variable. The levels should be provided as a list in c() with the names of the levels in quotation marks. It would follow the general template below. # define the variable as a factor data$newvariable &lt;- as.factor(data$oldvariable) # add the levels levels(data$newvariable) &lt;- c(&quot;label1&quot;, &quot;label2&quot;, &quot;labelk&quot;) Transform obama_vote in the nes from a numeric dummy variable into a factor. # the frequency table for the old variable freq(nes$obama_vote) ## nes$obama_vote ## Frequency Percent Valid Percent ## 0 1692 28.60 40.4 ## 1 2496 42.19 59.6 ## NA&#39;s 1728 29.21 ## Total 5916 100.00 100.0 # call the new variable `obamafct` nes$obamafct &lt;- as.factor(nes$obama_vote) # assign the levels levels(nes$obamafct) &lt;- c(&quot;did not vote for Obama&quot;, &quot;voted for Obama&quot;) # the frequency table for the new variable freq(nes$obamafct) ## nes$obamafct ## Frequency Percent Valid Percent ## did not vote for Obama 1692 28.60 40.4 ## voted for Obama 2496 42.19 59.6 ## NA&#39;s 1728 29.21 ## Total 5916 100.00 100.0 3.1.3 Troubleshooting There has to be a level provided for each value of the variable. That is why this process should occur after a variable has been cleaned. The level names do not have to be unique. That means this could be used as a (somewhat clunky) method of recoding a variable by collapsing its categories. "],["numeric.html", "3.2 Create a Numeric Variable", " 3.2 Create a Numeric Variable 3.2.1 Problem You want to transform an existing variable into a numeric variable. 3.2.2 Solution Decide on what to name the numeric variable. It could be the same name as the old variable. Use as.numeric() to assign the old variable values to the new variable. It would follow the general template below. data$newvariable &lt;- as.numeric(data$oldvariable) Here is an example that converts the seven-point party identification scale into a numeric variable. # frequency table of the original variable `pid_x` freq(nes$pid_x) ## nes$pid_x ## Frequency Percent Valid Percent ## StrDem 1485 25.1014 25.20 ## WkDem 873 14.7566 14.82 ## IndDem 747 12.6268 12.68 ## Ind 792 13.3874 13.44 ## IndRep 610 10.3110 10.35 ## WkRep 623 10.5308 10.57 ## StrRep 762 12.8803 12.93 ## NA&#39;s 24 0.4057 ## Total 5916 100.0000 100.00 # make `pid_x` numeric nes$pid7 &lt;- as.numeric(nes$pid_x) # frequency table of the new variable `pid7` freq(nes$pid7) ## nes$pid7 ## Frequency Percent Valid Percent ## 1 1485 25.1014 25.20 ## 2 873 14.7566 14.82 ## 3 747 12.6268 12.68 ## 4 792 13.3874 13.44 ## 5 610 10.3110 10.35 ## 6 623 10.5308 10.57 ## 7 762 12.8803 12.93 ## NA&#39;s 24 0.4057 ## Total 5916 100.0000 100.00 3.2.3 Troubleshooting Have not come across any problems yet. "],["subset.html", "3.3 Create a Subset of Data", " 3.3 Create a Subset of Data 3.3.1 Problem You want to create a subset of your data based on some criteria. 3.3.2 Solution - Basic Provide a name for the subset of data you are creating. Use subset(). The main arguments are the data object that is being subsetted, the criteria for determining which observations to include in the subset, and the selection of columns for inclusion in the new data object. The criteria use relational logic such as ==, &gt;, !=, etc. Follow the template below. newdata &lt;- subset(old_data, criteria, select = c(list of columns)) Here we create a subset that only includes people who voted for Obama. # frequency of `obama_vote` in full dataset freq(nes$obama_vote) ## nes$obama_vote ## Frequency Percent Valid Percent ## 0 1692 28.60 40.4 ## 1 2496 42.19 59.6 ## NA&#39;s 1728 29.21 ## Total 5916 100.00 100.0 # create a subset of `nes` data that only includes Obama voters ovoters &lt;- subset(nes, obama_vote == 1) # frequency of a `obama_vote` in subset freq(ovoters$obama_vote) ## ovoters$obama_vote ## Frequency Percent ## 1 2496 100 ## Total 2496 100 3.3.3 Solution - Tidyverse Provide a name for the subset of data you are creating. Assign the existing dataset to the new data object. Use the pipe %&gt;%. Use filter(). The pipe inherits the dataset from the prior step, so the only argument is the criteria for the subset. The criteria use relational logic such as ==, &gt;, !=, etc. Follow the template below. newdata &lt;- old_data %&gt;% filter(criteria) Here we create a subset that only includes people who voted for Obama. # frequency of `obama_vote` in full dataset freq(nes$obama_vote) ## nes$obama_vote ## Frequency Percent Valid Percent ## 0 1692 28.60 40.4 ## 1 2496 42.19 59.6 ## NA&#39;s 1728 29.21 ## Total 5916 100.00 100.0 # create a subset of `nes` data that only includes Obama voters obamites &lt;- nes %&gt;% filter(obama_vote == 1) # frequency of a `obama_vote` in subset freq(obamites$obama_vote) ## obamites$obama_vote ## Frequency Percent ## 1 2496 100 ## Total 2496 100 3.3.4 Troubleshooting Make sure that your subset is assigned to something. The criteria is written as variable, logical operator, and value of the variable. The values of categorical variables must be in quotation marks. "],["sum.html", "3.4 Summarize Data Using Means", " 3.4 Summarize Data Using Means 3.4.1 Problem You want to make a summary dataset that shows the mean of one variable for each value of some other variable. 3.4.2 Solution Assign the old data to a new data object. Use the pipe %&gt;% at the end of the line of code. Use group_by(). The argument is the variable that you want to use to find the means of some other variable. Use the pipe %&gt;% at the end of the line of code. Use summarise(). Create a name for the summary variable. Set the summary variable as being equal to the mean of the variable that you want to take the mean of. newdata &lt;- old_data %&gt;% group_by(group_variable) %&gt;% summarise(summary_variable = mean(mean_variable)) Here we calculate the mean feelings towards Obama, obama_therm, by party identification, pid_x. # assign old data to a new data object partymeans &lt;- nes %&gt;% # use group_by() to group the data by pid_x group_by(pid_x) %&gt;% # calculate the means of obama_therm summarise(average = wtd.mean(obama_therm, na.rm = T, weights = wt)) ## `summarise()` ungrouping output (override with `.groups` argument) # show the summary dataset partymeans ## # A tibble: 8 x 2 ## pid_x average ## &lt;fct&gt; &lt;dbl&gt; ## 1 StrDem 90.1 ## 2 WkDem 74.2 ## 3 IndDem 75.2 ## 4 Ind 53.3 ## 5 IndRep 32.8 ## 6 WkRep 36.7 ## 7 StrRep 17.6 ## 8 &lt;NA&gt; 61.0 3.4.3 Troubleshooting For survey data use wtd.mean(). Use mean() for non-survey data. "]]
